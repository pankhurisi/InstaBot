# libraries being used
import requests
import urllib
from textblob import TextBlob
from textblob.sentiments import NaiveBayesAnalyzer
from clarify_predict import get_tags_from_image
from pdtest import get_parallel_dots_keyword


# Token Owner: My own token
APP_ACCESS_TOKEN = '1943018362.461a955.12a586002daf46859def8db521710a5f'

# parallel_dot token generated by me
APP_ACCESS_TOKEN_PARALLEL_DOT = 'a95db2b0b5b9476fa77ceace841c34f1'

# base url for insta and parallel_dot
BASE_URL = 'https://api.instagram.com/v1/'
BASE_URL_PARALLEL_DOT = 'http://apis.paralleldots.com/'

# sandbox username used is i813853


# Function declaration for self info
def self_info():
    # url of user is being requested
    request_url = (BASE_URL + 'users/self/?access_token=%s') % APP_ACCESS_TOKEN
    print 'GET request url : %s' % request_url
    user_info = requests.get(request_url).json()

    # meta code is being checked for getting info
    if user_info['meta']['code'] == 200:
        if len(user_info['data']):
            # info from insta account is being displayed
            print 'Username: %s' % (user_info['data']['username'])
            print 'No. of followers: %s' % (user_info['data']['counts']['followed_by'])
            print 'No. of people you are following: %s' % (user_info['data']['counts']['follows'])
            print 'No. of posts: %s' % (user_info['data']['counts']['media'])
        else:
            print 'User does not exist!'
    else:
        print 'Status code received is not 200!'


# Function declaration for getting other user's id by username
def get_other_user_id(insta_username):
    # requesting url for getting user_id by username
    request_url = (BASE_URL + 'users/search?q=%s&access_token=%s') % (insta_username, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    user_info = requests.get(request_url).json()

    if user_info['meta']['code'] == 200:
        # check media has data
        if len(user_info['data']):
            return user_info['data'][0]['id']
        else:
            return None
    else:
        print 'Status code received is not 200!'
        exit()


# Function declaration to get information of a user by username
def get_other_user_info(insta_username):
    # user_id function is called to get user_id using username
    other_user_id = get_other_user_id(insta_username)

    # checking if user_id is empty
    if other_user_id == None:
        print 'User does not exist!'
        exit()
    request_url = (BASE_URL + 'users/%s?access_token=%s') % (other_user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    user_info = requests.get(request_url).json()

    #  meta code is being checked for getting info
    if user_info['meta']['code'] == 200:
        # check media has data
        if len(user_info['data']):
            # other users info is being displayed
            print 'Username: %s' % (user_info['data']['username'])
            print 'No. of followers: %s' % (user_info['data']['counts']['followed_by'])
            print 'No. of people you are following: %s' % (user_info['data']['counts']['follows'])
            print 'No. of posts: %s' % (user_info['data']['counts']['media'])
        else:
            print 'There is no data for this user!'
    else:
        print 'Status code received is not 200!'


# Function to check the content type of a post
def content_type(user_media):

    if user_media['meta']['code'] == 200:
        # check media has data
        if len(user_media['data']):
            for i in range(0, len(user_media['data'])):

                if user_media['data'][i]['type'] == "image":
                    post_url = user_media['data'][i]['images']['low_resolution']['url']
                    # checking whether the image is a gif by tearing up the url to get extension of file
                    if post_url[-3:] == "gif":
                        name = user_media['data'][i]['id'] + '.gif'
                    else:
                        name = user_media['data'][i]['id'] + '.png'

                elif user_media['data'][i]['type'] == "video":
                    # video of particular type is being stored in name
                    name = user_media['data'][i]['id'] + '.mp4'
                    post_url = user_media['data'][i]['videos']['low_resolution']['url']

                print 'ID: ' + name
                print 'Media Details: ' + post_url

                try:
                    urllib.urlretrieve(post_url,name)
                except:
                    print "Download error!"
                print '\n'
        else:
            print '\n No data or media found!'
    else:
        print "Response couldn't be fetched!"


# Function declaration to get my recent post
def get_my_post():
    # url request to get the recent post of owner
    request_url = (BASE_URL + 'users/self/media/recent/?access_token=%s') % APP_ACCESS_TOKEN
    print 'GET request url : %s' % request_url
    my_media = requests.get(request_url).json()

    if my_media['meta']['code'] == 200:
        # check media has data
        if len(my_media['data']):
            # image of particular type is being stored in image_name
            image_name = my_media['data'][0]['id'] + '.jpeg'
            image_url = my_media['data'][0]['images']['standard_resolution']['url']
            urllib.urlretrieve(image_url, image_name)
            print 'Your image has been downloaded!'
        else:
            print 'Post does not exist!'
    else:
        print 'Status code received is not 200!'


# Function declaration to get other user's recent post
def get_other_users_post(insta_username, num_posts):
    # user_id function is called to get user_id using username
    other_user_id = get_other_user_id(insta_username)

    # checking if user_id is empty
    if other_user_id is not None:
        # url request to get the recent post of other user
        request_url = (BASE_URL + 'users/%s/media/recent/?access_token=%s&count=%s') % \
                      (other_user_id, APP_ACCESS_TOKEN, str(num_posts))
        try:
            user_media = requests.get(request_url).json()
        except:
            print "Request couldn't be made"
            return
        content_type(user_media)
    else:
        print "User doesn't exist!"


# Function declaration to get id of recent post by the other user
def get_other_user_post_id(insta_username):
    # user_id function is called to get user_id using username
    other_user_id = get_other_user_id(insta_username)

    # checking if user_id is empty
    if other_user_id == None:
        print 'User does not exist!'
        exit()
    # url request to get the post_id of other user
    request_url = (BASE_URL + 'users/%s/media/recent/?access_token=%s') % (other_user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    other_user_media = requests.get(request_url).json()

    # meta code is being checked
    if other_user_media['meta']['code'] == 200:
        # check media has data
        if len(other_user_media['data']):
            # return the id of the recent post of  other user
            return other_user_media['data'][0]['id']
        else:
            print 'There is no recent post of the user!'
            exit()
    else:
        print 'Status code received is not 200!'
        exit()


# Function declaration to like recent post of other user
def like_post_of_other_user(insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/likes') % media_id
    # payload is usrd for accessing token
    payload = {"access_token": APP_ACCESS_TOKEN}
    print 'POST request url : %s' % request_url
    post_a_like = requests.post(request_url, payload).json()

    # meta code is being checked
    if post_a_like['meta']['code'] == 200:
        print 'Like was successful!'
    else:
        print 'Your like was unsuccessful. Try again!'


# Function declaration to get the recent post liked by me
def post_liked():
    # url reqyest to get the list of people liked the post
    request_url = (BASE_URL + 'users/self/media/liked?access_token=%s') % APP_ACCESS_TOKEN
    print 'GET request url : %s' % request_url
    my_media = requests.get(request_url).json()

    # meta code is being checked
    if my_media['meta']['code'] == 200:
        # check media has data
        if len(my_media['data']):
            print "Media liked by me:" + my_media['data'][0]['images']['standard_resolution']['url']
        else:
            print 'Post does not exist!'
    else:
        print "request not valid!"


# Function declaration to get the list of likes on recent post of other user
def get_list_of_likes(insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/likes?access_token=%s') % (media_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    like_info = requests.get(request_url).json()

    # meta code is being checked
    if like_info['meta']['code'] == 200:
        # check media has data
        if len(like_info['data']):
            for i in range(0, len(like_info['data'])):
                print like_info['data'][i]['username']
        else:
            print "no likes yet!"
    else:
        print 'Status code received is not 200!'


# Function declaration to comment on a recent post of other user
def post_comment(insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
    # comment is being entered here
    comment_text = raw_input("Your comment: ")
    payload = {'access_token': APP_ACCESS_TOKEN, 'text': comment_text}
    request_url = (BASE_URL + 'media/%s/comments') % media_id
    print 'POST request url : %s' % request_url

    make_comment = requests.post(request_url, payload).json()

    # meta code is being checked
    if make_comment['meta']['code'] == 200:
        print 'Successfully added a new comment!'
    else:
        print 'Unable to add comment. Try again!'


# Function declaration to get list of comments on recent post of other user
def get_list_of_comments(insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/comments?access_token=%s') % (media_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % request_url
    comment_info = requests.get(request_url).json()

    # meta code is being checked
    if comment_info['meta']['code'] == 200:# check media has data
        if len(comment_info['data']):
            # loop for printing the comment on a post
            for i in range(0, len(comment_info['data'])):
                print 'comment: %s || User: %s' % (comment_info['data'][i]['text'],
                                                   comment_info['data'][i]['from']['username'])
        else:
            print 'no comments yet!'
    else:
        print 'Status code other than 200 received!'


# Function declaration for deleting a comment if it's negative
def negative_comment_deletion(insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/comments/?access_token=%s') % (media_id, APP_ACCESS_TOKEN)
    print 'Get request url : %s' % request_url
    comment_information = requests.get(request_url).json()

    # meta code is being checked
    if comment_information ['meta']['code'] == 200:
        # check media has data
        if len(comment_information['data']):

            for i in range(0, len(comment_information['data'])):
                comment_id = comment_information['data'][i]['id']
                comment_text = comment_information['data'][i]['text']
                # nature of comment is being analyzed using textblob
                blob = TextBlob(comment_text, analyzer=NaiveBayesAnalyzer())

                if blob.sentiment.p_neg > blob.sentiment.p_pos:
                    print 'Negative comment : %s' % comment_text
                    delete_url = (BASE_URL + 'media/%s/comments/%s/?access_token=%s') % \
                                 (media_id, comment_id, APP_ACCESS_TOKEN)
                    print 'DELETE request url : %s' % delete_url
                    delete_information = requests.delete(delete_url).json()

                    # meta code is being checked
                    if delete_information['meta']['code'] == 200:
                        print 'Comment was deleted successfully!\n'
                    else:
                        print 'Unable to delete comment!'
                else:
                    print 'Positive comment : %s\n' % comment_text
            else:
                print 'There are no existing comments on the post!'
        else:
            print 'Status code received is not 200!'


# Function declaration to comment for promotion of business
def post_comment_for_product_promotion(mssg_for_promotion, insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
    payload = {'access_token': APP_ACCESS_TOKEN, 'text': mssg_for_promotion}
    request_url = (BASE_URL + 'media/%s/comments') % media_id
    print 'POST request url : %s' % request_url

    make_comment = requests.post(request_url, payload).json()

    # meta code is being checked
    if make_comment['meta']['code'] == 200:
        print 'Successfully added a new comment!'
    else:
        print 'Unable to add comment. Try again later!'


# Function declaration for product marketing
def product_marketing(insta_generated_keyword, mssg_for_promotion, insta_username):
    # function is called to get post_id using username
    media_id = get_other_user_post_id(insta_username)
# comments are being checked and analyzed to find comments related to our business
    request_url = (BASE_URL + 'media/%s/comments/?access_token=%s') % (media_id, APP_ACCESS_TOKEN)
    print 'Get request url : %s' % request_url
    comment_information = requests.get(request_url, verify=False).json()
    print comment_information

    # meta code is being checked
    if comment_information['meta']['code'] == 200:
        # check media has data
        if len(comment_information['data']):

            for i in range(0, len(comment_information['data'])):
                comment_text = comment_information['data'][i]['text']
                print comment_text
                comment_values = comment_text.split()
                for x in range(0, len(comment_values)):
                    if comment_values[x] == insta_generated_keyword:
                        post_comment_for_product_promotion(mssg_for_promotion, insta_username)
                        break
    else:
        print 'status code received is not 200!'

# tags and captions are being checked and analyzed to find info related to our business
    request_url = (BASE_URL + 'media/%s?access_token=%s') % (media_id, APP_ACCESS_TOKEN)
    print 'Get request url : %s' % request_url
    media_info = requests.get(request_url, verify=False).json()

    # checking if media_info is empty or not
    if media_info is not None:
        print media_info
        # meta code is being checked
        if media_info['meta']['code'] == 200:

            # check media has data
            if len(media_info['data']['tags']):
                insta_hashtag = media_info['data']['tags']

                for x in range(0, len(insta_hashtag)):
                    if insta_hashtag[x] == insta_generated_keyword:
                        print insta_hashtag[x]
                        post_comment_for_product_promotion(mssg_for_promotion, insta_username)
                        break
                    else:
                        print "no match found!"
            else:
                print "no tags were found"

            if media_info['data']['caption'] is not None:
                insta_caption = media_info['data']['caption']['text']
                type(insta_caption)

                caption_of_media_words = insta_caption.split()
                # paralleldot is being used to check keyword of caption
                caption = insta_caption.encode('ascii','ignore')
                print type(caption)
                option_function = get_parallel_dots_keyword(caption, APP_ACCESS_TOKEN_PARALLEL_DOT)

                if (len(option_function)>0):
                    keyword_in_caption = option_function[0]
                    print option_function[0]

                    for j in range(0, len(keyword_in_caption)):
                        if keyword_in_caption[j] == insta_generated_keyword:
                            print keyword_in_caption[j]
                            post_comment_for_product_promotion(mssg_for_promotion, insta_username)
                            break
                        else:
                            print "no match found!"

                # checking words of caption
                for j in range(0, len(caption_of_media_words)):

                    if caption_of_media_words[j] == insta_generated_keyword:
                        print caption_of_media_words[j]
                        post_comment_for_product_promotion(mssg_for_promotion, insta_username)
                        break
                    else:
                        print "no match found!"
            else:
                print "no caption were found!"
        else:
            print 'status code received is not 200!'

        # clarifai is been used for image processing
        image_url = media_info['data']['images']['standard_resolution']['url']
        new_image_url = image_url.encode('ascii','ignore')
        image_keywords = get_tags_from_image(new_image_url)
        print image_keywords
        array_of_dictionary = image_keywords['outputs'][0]['data']['concepts']
        print array_of_dictionary

        # loop for key iteration
        for k in range(0, len(array_of_dictionary)):
            keyword = array_of_dictionary[k]['name']
            print keyword
            if keyword == insta_generated_keyword:
                print array_of_dictionary[k]['name']
                post_comment_for_product_promotion(mssg_for_promotion, insta_username)
                break
            else:
                print "no match found!"
        else:
            print "no caption were found!"


# from here our bot is being started
def start_bot():
    while True:
        # menu for the choice of function
        print '\n'
        print 'Welcome to InstaBot! '
        print 'Menu:'
        print "a.Get my details\n"
        print "b.Get details of a other user using username of the user\n"
        print "c.Get my recent post\n"
        print "d.Get recent post of other user using username\n"
        print "e.Like the recent post of other user using username\n"
        print "f.Make a comment on the recent post of other user using username\n"
        print "g.get my recent liked media\n"
        print "h.Get list of comments on recent post of a user using username\n"
        print "i.Get list of likes on recent post of a user using username\n"
        print "j delete the negative comments from comment list of a post\n"
        print "k.Targetted commenting for promotion of business\n"
        print "l.Exit"

# choice for the function to be performed
        choice = raw_input("Enter you choice: ")
        if choice == "a":
            self_info()
        elif choice == "b":
            insta_username = raw_input("Enter the username of the user: ")
            get_other_user_info(insta_username)
        elif choice == "c":
            get_my_post()
        elif choice == "d":
            insta_username = raw_input("Enter the username of the user: ")
            num_posts = raw_input("Enter the number of posts you want to fetch: ")
            get_other_users_post(insta_username, num_posts)
        elif choice == "e":
            insta_username = raw_input("Enter the username of the user: ")
            like_post_of_other_user(insta_username)
        elif choice == "f":
            insta_username = raw_input("Enter the username of the user: ")
            post_comment(insta_username)
        elif choice == "g":
            post_liked()
        elif choice == "h":
            insta_username = raw_input("Enter the username of the user: ")
            get_list_of_comments(insta_username)
        elif choice == "i":
            insta_username = raw_input("Enter the username of the user: ")
            get_list_of_likes(insta_username)
        elif choice == "j":
            insta_username = raw_input("Enter the username of the user: ")
            negative_comment_deletion(insta_username)
        elif choice == "k":
            insta_generated_keyword = raw_input("Enter the keyword to be searched: ")
            mssg_for_promotion = raw_input("Enter the text to be commented: ")
            insta_username = raw_input("Enter the username of the user: ")
            product_marketing(insta_generated_keyword, mssg_for_promotion, insta_username)
        elif choice == "l":
            exit()
        else:
            print "wrong choice"

start_bot()
